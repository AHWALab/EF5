name: EF5 Multi-Platform Build

on:
  push:
    branches: [ v1.2.5, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ v1.2.5, master ]

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libgeotiff-dev build-essential autoconf automake libtool

      - name: Build
        run: |
          autoreconf --force --install
          ./configure
          make

      - name: Archive Linux build
        run: |
          mkdir -p shared
          cp bin/ef5 shared/ef5 || true
          tar -czf shared/ef5_linux.tar.gz -C shared ef5 || true

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux
          path: shared/ef5_linux.tar.gz

  build-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cross:
          - mingw64
          - mingw32
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install MinGW and dependencies
        run: |
          sudo apt-get update
          if [ "${{ matrix.cross }}" = "mingw64" ]; then
            sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-x86-64-dev zlib1g-dev autoconf automake libtool wget
          else
            sudo apt-get install -y gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-i686-dev zlib1g-dev autoconf automake libtool wget
          fi

      - name: Build and install dependencies (zlib, libtiff, libgeotiff)
        run: |
          set -e
          if [ "${{ matrix.cross }}" = "mingw64" ]; then
            export CC=x86_64-w64-mingw32-gcc
            export CXX=x86_64-w64-mingw32-g++
            export CXXFLAGS="-I/usr/local/include -I/usr/x86_64-w64-mingw32/sys-root/mingw/include $CXXFLAGS"
            export CFLAGS="-I/usr/local/include -I/usr/x86_64-w64-mingw32/sys-root/mingw/include $CFLAGS"
            export LDFLAGS="-L/usr/x86_64-w64-mingw32/sys-root/mingw/lib $LDFLAGS"
            export PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/lib:$PATH
            # zlib
            wget https://zlib.net/zlib-1.3.1.tar.gz
            tar zxf zlib-1.3.1.tar.gz
            cd zlib-1.3.1
            sed -e s/"PREFIX ="/"PREFIX = x86_64-w64-mingw32-"/ -i win32/Makefile.gcc
            make -f win32/Makefile.gcc
            sudo INCLUDE_PATH=/usr/local/include LIBRARY_PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/lib BINARY_PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/lib/bin make -f win32/Makefile.gcc install
            cd ..
            # libtiff
            wget http://dl.maptools.org/dl/libtiff/tiff-3.8.2.tar.gz
            tar zxf tiff-3.8.2.tar.gz
            cd tiff-3.8.2
            ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32/sys-root/mingw --enable-cxx --enable-static \
              --with-zlib-include-dir=/usr/local/include \
              --with-zlib-lib-dir=/usr/x86_64-w64-mingw32/sys-root/mingw/lib --disable-shared
            make
            sudo make install
            cd ..
            # libgeotiff
            wget http://download.osgeo.org/geotiff/libgeotiff/libgeotiff-1.4.2.tar.gz
            tar zxf libgeotiff-1.4.2.tar.gz
            cd libgeotiff-1.4.2
            ./configure --host=x86_64-w64-mingw32 --without-proj --prefix=/usr/x86_64-w64-mingw32/sys-root/mingw --enable-static \
              --with-zip=yes --enable-incode-epsg --disable-static \
              --with-libtiff-include-dir=/usr/x86_64-w64-mingw32/sys-root/mingw/include \
              --with-libtiff-lib-dir=/usr/x86_64-w64-mingw32/sys-root/mingw/lib
            make
            sudo make install
            cd ..
          else
            export CC=i686-w64-mingw32-gcc
            export CXX=i686-w64-mingw32-g++
            export CXXFLAGS="-I/usr/local/include -I/usr/i686-w64-mingw32/sys-root/mingw/include $CXXFLAGS"
            export CFLAGS="-I/usr/local/include -I/usr/i686-w64-mingw32/sys-root/mingw/include $CFLAGS"
            export LDFLAGS="-L/usr/i686-w64-mingw32/sys-root/mingw/lib $LDFLAGS"
            export PATH=/usr/i686-w64-mingw32/sys-root/mingw/lib:$PATH
            # zlib
            wget https://zlib.net/zlib-1.3.1.tar.gz
            tar zxf zlib-1.3.1.tar.gz
            cd zlib-1.3.1
            sed -e s/"PREFIX ="/"PREFIX = i686-w64-mingw32-"/ -i win32/Makefile.gcc
            make -f win32/Makefile.gcc
            sudo INCLUDE_PATH=/usr/local/include LIBRARY_PATH=/usr/i686-w64-mingw32/sys-root/mingw/lib BINARY_PATH=/usr/i686-w64-mingw32/sys-root/mingw/lib/bin make -f win32/Makefile.gcc install
            cd ..
            # libtiff
            wget http://dl.maptools.org/dl/libtiff/tiff-3.8.2.tar.gz
            tar zxf tiff-3.8.2.tar.gz
            cd tiff-3.8.2
            ./configure --host=i686-w64-mingw32 --prefix=/usr/i686-w64-mingw32/sys-root/mingw --enable-cxx --enable-static \
              --with-zlib-include-dir=/usr/local/include \
              --with-zlib-lib-dir=/usr/i686-w64-mingw32/sys-root/mingw/lib --disable-shared
            make
            sudo make install
            cd ..
            # libgeotiff
            wget http://download.osgeo.org/geotiff/libgeotiff/libgeotiff-1.4.2.tar.gz
            tar zxf libgeotiff-1.4.2.tar.gz
            cd libgeotiff-1.4.2
            ./configure --host=i686-w64-mingw32 --without-proj --prefix=/usr/i686-w64-mingw32/sys-root/mingw --enable-static \
              --with-zip=yes --enable-incode-epsg --disable-static \
              --with-libtiff-include-dir=/usr/i686-w64-mingw32/sys-root/mingw/include \
              --with-libtiff-lib-dir=/usr/i686-w64-mingw32/sys-root/mingw/lib
            make
            sudo make install
            cd ..
          fi
          set +e

      - name: Build for Windows
        run: |
          set -e
          if [ "${{ matrix.cross }}" = "mingw64" ]; then
            export CC=x86_64-w64-mingw32-gcc
            export CXX=x86_64-w64-mingw32-g++
            export CFLAGS="-I/usr/local/include -I/usr/x86_64-w64-mingw32/sys-root/mingw/include $CFLAGS"
            export CXXFLAGS="-I/usr/local/include -I/usr/x86_64-w64-mingw32/sys-root/mingw/include $CXXFLAGS"
            export LDFLAGS="-L/usr/x86_64-w64-mingw32/sys-root/mingw/lib $LDFLAGS"
            autoreconf --force --install
            ./configure --host=x86_64-w64-mingw32
            make
            mkdir -p shared
            cp bin/ef5.exe shared/ef5_64.exe
            cd shared
            zip ef5_win64.zip ef5_64.exe
          else
            export CC=i686-w64-mingw32-gcc
            export CXX=i686-w64-mingw32-g++
            export CFLAGS="-I/usr/local/include -I/usr/i686-w64-mingw32/sys-root/mingw/include $CFLAGS"
            export CXXFLAGS="-I/usr/local/include -I/usr/i686-w64-mingw32/sys-root/mingw/include $CXXFLAGS"
            export LDFLAGS="-L/usr/i686-w64-mingw32/sys-root/mingw/lib $LDFLAGS"
            autoreconf --force --install
            ./configure --host=i686-w64-mingw32
            make
            mkdir -p shared
            cp bin/ef5.exe shared/ef5_32.exe
            cd shared
            zip ef5_win32.zip ef5_32.exe
          fi

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.cross }}-build
          path: |
            shared/ef5_win64.zip
            shared/ef5_win32.zip

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: build-linux
          path: ./artifacts

      - name: Download Windows mingw64 artifact
        uses: actions/download-artifact@v4
        with:
          name: mingw64-build
          path: ./artifacts

      - name: Download Windows mingw32 artifact
        uses: actions/download-artifact@v4
        with:
          name: mingw32-build
          path: ./artifacts

      - name: Get release info for tags
        id: get_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            return release.data.upload_url;

      - name: Create or update latest release for master
        id: create_latest_release
        if: github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Try to get existing latest release
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const latestRelease = releases.data.find(release => release.tag_name === 'latest');
              
              if (latestRelease) {
                // Update existing latest release
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: latestRelease.id,
                  name: 'Latest Build',
                  body: `Latest build from master branch (${new Date().toISOString()})`,
                  draft: false,
                  prerelease: true
                });
                return latestRelease.upload_url;
              } else {
                // Create new latest release
                const newRelease = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: 'latest',
                  name: 'Latest Build',
                  body: `Latest build from master branch (${new Date().toISOString()})`,
                  draft: false,
                  prerelease: true
                });
                return newRelease.data.upload_url;
              }
            } catch (error) {
              console.error('Error creating/updating latest release:', error);
              throw error;
            }

      - name: Upload Linux artifact to tag release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: ./artifacts/shared/ef5_linux.tar.gz
          asset_name: ef5_linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows mingw64 artifact to tag release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: ./artifacts/shared/ef5_win64.zip
          asset_name: ef5_win64.zip
          asset_content_type: application/zip

      - name: Upload Windows mingw32 artifact to tag release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: ./artifacts/shared/ef5_win32.zip
          asset_name: ef5_win32.zip
          asset_content_type: application/zip

      - name: Upload Linux artifact to latest release
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_latest_release.outputs.result }}
          asset_path: ./artifacts/shared/ef5_linux.tar.gz
          asset_name: ef5_linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows mingw64 artifact to latest release
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_latest_release.outputs.result }}
          asset_path: ./artifacts/shared/ef5_win64.zip
          asset_name: ef5_win64.zip
          asset_content_type: application/zip

      - name: Upload Windows mingw32 artifact to latest release
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_latest_release.outputs.result }}
          asset_path: ./artifacts/shared/ef5_win32.zip
          asset_name: ef5_win32.zip
          asset_content_type: application/zip 